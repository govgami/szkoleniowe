<?xml version="1.0" encoding="UTF-8"?>
<!-- Generated by org.testng.reporters.JUnitXMLReporter -->
<testsuite hostname="x200" ignored="0" name="Default test" tests="11" failures="1" timestamp="02 Nov 2017 10:10:59 GMT" time="2.957" errors="0">
  <testcase name="shouldCreateDefaultConnection" time="2.87" classname="testing._DbTest">
    <failure type="java.lang.ExceptionInInitializerError">
      <![CDATA[java.lang.ExceptionInInitializerError
	at testing._DbTest.shouldCreateDefaultConnection(_DbTest.java:48)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:108)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:669)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:877)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1201)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
	at org.testng.TestRunner.privateRun(TestRunner.java:776)
	at org.testng.TestRunner.run(TestRunner.java:634)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:425)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:420)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:385)
	at org.testng.SuiteRunner.run(SuiteRunner.java:334)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1318)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1243)
	at org.testng.TestNG.runSuites(TestNG.java:1161)
	at org.testng.TestNG.run(TestNG.java:1129)
	at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:114)
	at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
	at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
Caused by: java.lang.RuntimeException: org.hibernate.HibernateException: Errors in named queries: 
getLowestBidOfChosenSignCurrencyRatio failed because of: org.hibernate.QueryException: could not resolve property: currencycode of: persistence.db.table.currency.CurrencyRatios [select e from persistence.db.table.currency.CurrencyRatios e inner join e.currency where e.currencycode = ? order by e.bidPrice asc]
	at persistence.db.DbConnection.buildSessionFactory(DbConnection.java:105)
	at persistence.db.DbConnection.<clinit>(DbConnection.java:97)
	... 26 more
Caused by: org.hibernate.HibernateException: Errors in named queries: 
getLowestBidOfChosenSignCurrencyRatio failed because of: org.hibernate.QueryException: could not resolve property: currencycode of: persistence.db.table.currency.CurrencyRatios [select e from persistence.db.table.currency.CurrencyRatios e inner join e.currency where e.currencycode = ? order by e.bidPrice asc]
	at org.hibernate.internal.SessionFactoryImpl.<init>(SessionFactoryImpl.java:338)
	at org.hibernate.boot.internal.SessionFactoryBuilderImpl.build(SessionFactoryBuilderImpl.java:452)
	at org.hibernate.cfg.Configuration.buildSessionFactory(Configuration.java:710)
	at persistence.db.DbConnection.buildSessionFactory(DbConnection.java:102)
	... 27 more
]]>
    </failure>
  </testcase> <!-- shouldCreateDefaultConnection -->
  <testcase name="shouldThrowRuntimeExceptionDueToWrongParameter" time="0.003" classname="testing._DbTest"/>
  <testcase name="shouldGetHighestPriceDifferenceOfCurrencyRatios" time="0.0" classname="testing._DbTest">
    <skipped/>
  </testcase> <!-- shouldGetHighestPriceDifferenceOfCurrencyRatios -->
  <testcase name="shouldGetLimittedSortedCurrency" time="0.0" classname="testing._DbTest">
    <skipped/>
  </testcase> <!-- shouldGetLimittedSortedCurrency -->
  <testcase name="shouldGetLimittedSortedCurrencyRatiosLowestBidPrice" time="0.0" classname="testing._DbTest">
    <skipped/>
  </testcase> <!-- shouldGetLimittedSortedCurrencyRatiosLowestBidPrice -->
  <testcase name="shouldGetSortedCurrency" time="0.0" classname="testing._DbTest">
    <skipped/>
  </testcase> <!-- shouldGetSortedCurrency -->
  <testcase name="shouldInsertNewCurrency" time="0.0" classname="testing._DbTest">
    <skipped/>
  </testcase> <!-- shouldInsertNewCurrency -->
  <testcase name="shouldInsertNewCountry" time="0.0" classname="testing._DbTest">
    <skipped/>
  </testcase> <!-- shouldInsertNewCountry -->
  <testcase name="shouldConnectCurrencyCountry" time="0.0" classname="testing._DbTest">
    <skipped/>
  </testcase> <!-- shouldConnectCurrencyCountry -->
  <testcase name="shouldDisconnectCurrencyCountry" time="0.0" classname="testing._DbTest">
    <skipped/>
  </testcase> <!-- shouldDisconnectCurrencyCountry -->
  <testcase name="shouldRemoveObjects" time="0.0" classname="testing._DbTest">
    <skipped/>
  </testcase> <!-- shouldRemoveObjects -->
</testsuite> <!-- Default test -->
